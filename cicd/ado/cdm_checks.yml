name: $(Date:yyyy.MM.dd)$(Rev:.r)

schedules:
  - cron: "0 7 * * 1-5"
    displayName: "Weekdays 07:00 (UTC)"
    branches:
      include:
        - main
    always: true

trigger:
  branches:
    include:
      - main
pr:
  branches:
    include:
      - main

parameters:
  - name: stages
    type: object
    default:
      - name: general
        displayName: 'General'
        dependsOn: ['build']
        condition: and(succeeded(), or(eq(variables.isPR, true), eq(variables.isMainBranch, true)))
        variableGroups:
        jobs:
          - name: terraform
            displayName: 'Terraform'
            dependsOn: []
            variableGroups:
            tasks:
              installTaskctl: false
              powershellCheckEnvVariables:
              powershellADOEnvVariables:
                ADO_ACCESS_TOKEN: $(ado_access_token)
              createADOWorkItem: true
          - name: github
            displayName: 'GitHub'
            dependsOn: []
            variableGroups:
              - github-creds
            tasks:
              installTaskctl: false
              powershellCheckEnvVariables:
                GITHUB_TOKEN: $(GITHUB_TOKEN)
              powershellADOEnvVariables:
                ADO_ACCESS_TOKEN: $(ado_access_token)
              createADOWorkItem: false
          - name: azure_devops
            displayName: 'Azure DevOps'
            dependsOn: []
            variableGroups:
            tasks:
              installTaskctl: false
              powershellCheckEnvVariables:
                ADO_ACCESS_TOKEN: $(System.AccessToken)
              powershellADOEnvVariables:
                ADO_ACCESS_TOKEN: $(ado_access_token)
              createADOWorkItem: false
      - name: nonprod
        displayName: 'NONPROD'
        dependsOn: ['build']
        condition: and(succeeded(), or(eq(variables.isPR, true), eq(variables.isMainBranch, true)))
        variableGroups:
          - azure-sp-creds
        jobs:
          - name: azure_kubernetes_service
            displayName: 'Azure Kubernetes Service'
            dependsOn: []
            variableGroups:
            tasks:
              installTaskctl: false
              powershellCheckEnvVariables:
                ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              powershellADOEnvVariables:
                ADO_ACCESS_TOKEN: $(ado_access_token)
              createADOWorkItem: true
          - name: azure_application_gateway
            displayName: 'Azure Application Gateway'
            dependsOn: []
            variableGroups:
            tasks:
              installTaskctl: false
              powershellCheckEnvVariables:
                ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              powershellADOEnvVariables:
                ADO_ACCESS_TOKEN: $(ado_access_token)
              createADOWorkItem: true
          - name: aws_elastic_kubernetes_service
            displayName: 'AWS Elastic Kubernetes Service'
            dependsOn: []
            variableGroups:
              - aws-creds
            tasks:
              installTaskctl: false
              powershellCheckEnvVariables:
                AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
                AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
              powershellADOEnvVariables:
                ADO_ACCESS_TOKEN: $(ado_access_token)
              createADOWorkItem: true
      - name: prod
        displayName: 'PROD'
        dependsOn: ['build']
        condition: and(succeeded(), eq(variables.isMainBranch, true))
        variableGroups:
          - azure-sp-creds
        jobs:
          - name: azure_kubernetes_service
            displayName: 'Azure Kubernetes Service'
            dependsOn: []
            variableGroups:
            tasks:
              installTaskctl: false
              powershellCheckEnvVariables:
                ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              powershellADOEnvVariables:
                ADO_ACCESS_TOKEN: $(ado_access_token)
              createADOWorkItem: true
          - name: azure_application_gateway
            displayName: 'Azure Application Gateway'
            dependsOn: []
            variableGroups:
            tasks:
              installTaskctl: false
              powershellCheckEnvVariables:
                ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              powershellADOEnvVariables:
                ADO_ACCESS_TOKEN: $(ado_access_token)
              createADOWorkItem: true
          - name: digicert
            displayName: 'Digicert'
            dependsOn: []
            variableGroups:
              - digicert
            tasks:
              installTaskctl: false
              powershellCheckEnvVariables:
                DIGICERT_API_KEY: $(DIGICERT_API_KEY)
              powershellADOEnvVariables:
                ADO_ACCESS_TOKEN: $(ado_access_token)
              createADOWorkItem: false
          - name: aws_elastic_kubernetes_service
            displayName: 'AWS Elastic Kubernetes Service'
            dependsOn: []
            variableGroups:
              - aws-creds
            tasks:
              installTaskctl: false
              powershellCheckEnvVariables:
                AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
                AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
              powershellADOEnvVariables:
                ADO_ACCESS_TOKEN: $(ado_access_token)
              createADOWorkItem: true

variables:
  - template: templates/variables/cdm_checks_pipeline_variables.yml

  # - group: 'ensono-digital-sre-ado'

  - name: isPR
    value: $[startsWith(variables['Build.SourceBranch'], 'refs/pull')]
  - name: isMainBranch
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

pool:
  vmImage: '$(pipeline_vm_image)'

stages:
  - stage: build
    displayName: 'Build'

    jobs:
      - job: validate
        displayName: 'Validate'

        steps:
          - template: templates/pipeline/tasks/taskctl_setup.yml
            parameters:
              taskctlVersion: $(taskctl_version)

          - task: Bash@3
            displayName: 'LINT: Code'
            inputs:
              targetType: inline
              script: |
                taskctl lint

  - ${{ each stage in parameters.stages }}:
      - stage: ${{ stage.name }}
        displayName: ${{ stage.displayName }}
        dependsOn: ${{ stage.dependsOn }}
        condition: ${{ stage.condition }}
        variables:
          - ${{ if stage.variableGroups }}:
              - ${{ each group in stage.variableGroups }}:
                  - group: ${{ group }}

        jobs:
          - ${{ each job in stage.jobs }}:
              - job: ${{ job.name }}
                displayName: ${{ job.displayName }}
                dependsOn: ${{ job.dependsOn }}
                variables:
                  - ${{ if job.variableGroups }}:
                      - ${{ each group in job.variableGroups}}:
                          - group: ${{ group }}
                  - template: '../../${{ variables.cdm_checks_directory }}/${{ job.name }}/pipeline_variables.yml'
                  - name: cdm_checks_working_directory
                    value: '$(Build.SourcesDirectory)/$(cdm_checks_directory)'
                  - name: ado_integration_working_directory
                    value: '$(Build.SourcesDirectory)/$(ado_integration_directory)'

                steps:
                  - ${{ if eq(job.tasks.installTaskctl, true) }}:
                      - template: templates/pipeline/tasks/taskctl_setup.yml
                        parameters:
                          taskctlVersion: $(taskctl_version)

                  - task: PowerShell@2
                    displayName: 'RUN: CDM Check'
                    inputs:
                      targetType: 'filePath'
                      workingDirectory: $(cdm_checks_working_directory)
                      filePath: '$(cdm_checks_working_directory)/Invoke-CDMCheck.ps1'
                    env:
                      ${{ if job.tasks.powershellCheckEnvVariables }}:
                        ${{ each variable in job.tasks.powershellCheckEnvVariables }}:
                          ${{ insert }}:
                            ${{ variable.key }}: ${{ variable.value }}

                  - ${{ if eq(job.tasks.createADOWorkItem, true) }}:
                      - task: PowerShell@2
                        displayName: 'CREATE: ADO Work Item'
                        condition: failed()
                        inputs:
                          targetType: 'filePath'
                          workingDirectory: $(ado_integration_working_directory)
                          filePath: '$(ado_integration_working_directory)/Invoke-Integration.ps1'
                        env:
                          ADO_ACTION: 'create-workitem'
                          ${{ if job.tasks.powershellADOEnvVariables }}:
                            ${{ each variable in job.tasks.powershellADOEnvVariables }}:
                              ${{ insert }}:
                                ${{ variable.key }}: ${{ variable.value }}

                  - task: PublishTestResults@2
                    displayName: 'PUBLISH: CDM Check Results'
                    condition: succeededOrFailed()
                    inputs:
                      testRunTitle: '${{ stage.displayName }} - ${{ job.displayName }}'
                      testResultsFormat: 'NUnit'
                      testResultsFiles: '$(cdm_checks_working_directory)/${{ job.name }}/$(CDM_check_result_filename)'
                      failTaskOnFailureToPublishResults: true
