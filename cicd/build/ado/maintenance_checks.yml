name: $(Date:yyyy.MM.dd)$(Rev:.r)

trigger:
  branches:
    include:
      - main
pr:
  branches:
    include:
      - main

parameters:
  - name: stages
    type: object
    default:
      - name: general
        displayName: 'General'
        dependsOn: ['build']
        condition: and(succeeded(), or(eq(variables.isPR, true), eq(variables.isMainBranch, true)))
        variableGroups:
        jobs:
          - name: terraform
            displayName: 'Terraform'
            dependsOn: []
            variableGroups:
            tasks:
              installTaskctl: false
              powershellArguments: ''
              powershellEnvVariables:
              uploadCheckResults: true
          - name: github
            displayName: 'GitHub'
            dependsOn: []
            variableGroups:
              - github-creds
            tasks:
              installTaskctl: false
              powershellArguments: ''
              powershellEnvVariables:
                GITHUB_TOKEN: $(GITHUB_TOKEN)
              uploadCheckResults: true
      - name: nonprod
        displayName: 'NONPROD'
        dependsOn: ['build']
        condition: and(succeeded(), or(eq(variables.isPR, true), eq(variables.isMainBranch, true)))
        variableGroups:
          - azure-sp-creds
        jobs:
          - name: azure_kubernetes_service
            displayName: 'Azure Kubernetes Service'
            dependsOn: []
            variableGroups:
            tasks:
              installTaskctl: false
              powershellArguments: ''
              powershellEnvVariables:
                ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              uploadCheckResults: true
          - name: certificate
            displayName: 'Certificate'
            dependsOn: []
            variableGroups:
            tasks:
              installTaskctl: false
              powershellArguments: ''
              powershellEnvVariables:
                ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              uploadCheckResults: true
      - name: prod
        displayName: 'PROD'
        dependsOn: ['build']
        condition: and(succeeded(), eq(variables.isMainBranch, true))
        variableGroups:
          - azure-sp-creds
        jobs:
          - name: azure_kubernetes_service
            displayName: 'Azure Kubernetes Service'
            dependsOn: []
            variableGroups:
            tasks:
              installTaskctl: false
              powershellArguments: ''
              powershellEnvVariables:
                ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              uploadCheckResults: true
          - name: certificate
            displayName: 'Certificate'
            dependsOn: []
            variableGroups:
              - digicert
            tasks:
              installTaskctl: false
              powershellArguments: ''
              powershellEnvVariables:
                DIGICERT_API_KEY: $(DIGICERT_API_KEY)
                ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              uploadCheckResults: true

variables:
  - template: templates/variables/pipeline_variables.yml

  - name: isPR
    value: $[startsWith(variables['Build.SourceBranch'], 'refs/pull')]
  - name: isMainBranch
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

pool:
  vmImage: '$(ado_vm_image)'

stages:
  - stage: build
    displayName: 'Build'

    jobs:
      - job: validate
        displayName: 'Validate'

        steps:
          - template: templates/pipeline/edir_setup.yml
            parameters:
              taskctlVersion: $(taskctl_version)

          - task: Bash@3
            displayName: 'LINT: Code'
            inputs:
              targetType: inline
              script: |
                taskctl lint

  - ${{ each stage in parameters.stages }}:
      - stage: ${{ stage.name }}
        displayName: ${{ stage.displayName }}
        dependsOn: ${{ stage.dependsOn }}
        condition: ${{ stage.condition }}
        variables:
          - ${{ if stage.variableGroups }}:
              - ${{ each group in stage.variableGroups }}:
                  - group: ${{ group }}

        jobs:
          - ${{ each job in stage.jobs }}:
              - job: ${{ job.name }}
                displayName: ${{ job.displayName }}
                dependsOn: ${{ job.dependsOn }}
                variables:
                  - ${{ if job.variableGroups }}:
                      - ${{ each group in job.variableGroups}}:
                          - group: ${{ group }}
                  - template: templates/variables/${{ job.name }}_variables.yml
                  - name: working_directory
                    value: '$(maintenance_checks_directory)/${{ job.name }}'

                steps:
                  - ${{ if eq(job.tasks.installTaskctl, true) }}:
                      - template: templates/pipeline/edir_setup.yml
                        parameters:
                          taskctlVersion: $(taskctl_version)

                  - task: PowerShell@2
                    displayName: 'RUN: Maintenance Check'
                    inputs:
                      targetType: 'filePath'
                      workingDirectory: $(working_directory)
                      filePath: '$(working_directory)/$(maintenance_check_powershell_filename)'
                      arguments: '$ {{ job.tasks.powershellArguments }}'
                    env:
                      ${{ if job.tasks.powershellEnvVariables }}:
                        ${{ each variable in job.tasks.powershellEnvVariables }}:
                          ${{ insert }}:
                            ${{ variable.key }}: ${{ variable.value }}

                  - ${{ if eq(job.tasks.uploadCheckResults, true) }}:
                      - task: PublishTestResults@2
                        displayName: 'PUBLISH: Maintenance Check Results'
                        condition: succeededOrFailed()
                        inputs:
                          testRunTitle: '${{ stage.displayName }} - ${{ job.displayName }}'
                          testResultsFormat: 'NUnit'
                          testResultsFiles: '$(working_directory)/$(maintenance_check_result_filename)'
                          failTaskOnFailureToPublishResults: true
